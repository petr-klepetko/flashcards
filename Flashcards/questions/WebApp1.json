{
   "name": "WebApp1",

   "questions": [
      {
         "question": "Výhody webových aplikací",
         "answer": "Použití bez instalace, snadná údržba (je to na serveru), globálí dosah (dostupné z internetu)"  
      },
      {
         "question": "Nevýhody",
         "answer": "Složitý vývojářský stack - frontend (HTML, CSS, Javascript),\n preprocesory css, transpilátory JS,...;\nbackendové technologie (PHP/Ruby/Python, Java, .NET, Node.js\n protokol HTTP a jeho specifika\nhorší Ux\nmusí být připojení k internetu"  
      },
      {
         "question": "Přístupy v architektuře webových aplikací",
         "answer": "– Aplikace běžící v prohlížeči\n– Server side aplikace\n– kombinace\n– využití REST API"  
      },
      {
         "question": "Zkratka HTTP",
         "answer": "Hypertext transfer protocol\nProtokol pro přenos objektů libovolného typu, i formulářových dat\nvystaven nad protokolem TCP"  
      },
      {
         "question": "Co znamená, že je bezstavový?",
         "answer": "Prohlížeč pošle požadavek a dostane odpověď – nepamatuje si historii, jednotlivé požadavky jsou oddělené"  
      },
      {
         "question": "Základní model protokolu HTTP",
         "answer": "1 – navázání spojení\n2 – zaslání požadavku klientem\n3 – Zaslání odpovědi serverem\n4 – uzavření spojení"  
      },
      {
         "question": "Metody",
         "answer": "GET – získání dat\nPOST – odesílání dat na server, spíš úprava, hlavně formulář\nPUT – Přidání záznamu (většinou)\nDELETE – mazání záznamu"  
      },
      {
         "question": "Struktura HTTP požadavku",
         "answer": "Metoda, url, verze http, hlavičky, prázdná řádka, tělo požadavku"  
      },
      {
         "question": "Struktura odpovědi",
         "answer": "Verze protokolu, stavový kód, stavové hlášení\nhlavičky\nprázdná řádka\nobsah odpovědi"  
      },
      {
         "question": "Stavové kódy",
         "answer": "1xx – informativní\n2xx – úspěch\n3xx – přesměrování\n4xx – chyba klienta\n5xx – chyba serveru"  
      },
      {
         "question": "Metody pro formulář",
         "answer": "Get a Post\nDá se nastavit ve formuláři"  
      },
      {
         "question": "Formulář v metodě Get je",
         "answer": "V query stringu, zakódovaný v url za otazníkem (nemůžou tam být mezery), např. chrome to zobrazuje s diakritikou, i když to tak není"  
      },
      {
         "question": "kódování v url",
         "answer": "znaky se dají do UTF-8, kde každý znak má 2B\nv prohlížeči se zobrazí jako procento a dva znaky, které reprezentují hodnotu obou bytů"  
      },
      {
         "question": "formulář v metodě post",
         "answer": "data se zase stejně zakódují, ale neposílají se v url, ale v těle požadavku (může to být delší a není to tak dobře vidět"  
      },
      {
         "question": "Na co by se měla používat metoda GET (data v query stringu)",
         "answer": "Pouze, když získáváme data, ne když něco měníme nebo vytváříme\njde to ručně přepsat\ndotazy jsou vidět"  
      },
      {
         "question": "Soubory přes HTTP",
         "answer": "Multipart-form-data, každý soubor nebo pole se odešle zakódovaný jako vlastní příloha"  
      },
      {
         "question": "Povinnost hlaviček",
         "answer": "Některé jsou, některé ne"  
      },
      {
         "question": "Jaké jsou důležité hlavičky podle pana Koska",
         "answer": "Date, Content-type, Host, Location"  
      },
      {
         "question": "Date",
         "answer": "Datum a čas požadavku"  
      },
      {
         "question": "Content-type",
         "answer": "Formát odesílaných dat"  
      },
      {
         "question": "Host",
         "answer": "Název serveru, se kterým se komunikuje\nHistoricky se dříve psala jen adresa na serveru, ale na jedné IP adrese může být více domén, resp. virtuálních serverů, takže aby se poznalo, který server chcemme, používáme hlavičku HOST"  
      },
      {
         "question": "Location",
         "answer": "Obsah, který je v této hlavičce, obsahuje adresu, na kterou budeme přesměrováni\n(adresa, kam máme jít)"  
      },
      {
         "question": "Proč je někdy adresa s www na začátku a někdy ne?",
         "answer": "Jedna z nich je primátní, na tu druhou se odkazuje pomocí hlavičky Location"  
      },
      {
         "question": "hlavičky na cachování",
         "answer": "cache-controll, expires, If-modified-since, If-none-match, Last-modified"
      },
      {
         "question": "Hlavičky na domlouvání obsahu",
         "answer": "Accept – typy dat podporované klientem\nAccept-charset – podporované kódování\nAccept-language – podporované jazyky\nAllow – seznam metod, kterými je možné komunikovat"  
      },
      {
         "question": "Hlavičky pro identifikační údaje",
         "answer": "User-agent – co je to za prohlížeš\nServer – identifikace serveru\nReferer – url serveru, odkud bylo získáno url pro tento požadavek (odkud přišli\n"
      },
      {
         "question": "Jak se v PHP čtou hlavičky",
         "answer": "$_SERVER['NAZEV_HLAVICKY']"  
      },
      {
         "question": "Jak se v PHP nastavují hlavičky?",
         "answer": "Header('název-hlavičky: hodnota');"  
      },
      {
         "question": "Jak zakázat cachování?",
         "answer": "Header('Cache-controll: no-cache, no-store, must-revalidate');\nHeader('Expires: 0');"  
      },
      {
         "question": "Jak a proč přeseměrovávat?",
         "answer": "Když máme odkaz, který mění stav backendu, tak se nesmí tato stránka uložit do historie, aby se neodeslala znovu.\nHlavičky Location neukládají, takže super, to by mělo být na konci toho skriptu"
      },
      {
         "question": "V čem spočívá ukládání stavových informací v url",
         "answer": "všechno se ukládá do url, všechny odkazy na stránce musí v každém kroce obsahovat aktuální stavové informace, aby se držely v url\nVšechny informace jsou vidět, je to pracné"  
      },
      {
         "question": "Cookies",
         "answer": "Textové soubory, které jsou ulžené v prohlížeči a drží stavové informace\nNastavují se skriptem\nPři dalším požadavku odešle všechny své cookies, tím ho jde poznaz"  
      },
      {
         "question": "Druhy cookies",
         "answer": "Session – smažou se po zavření\nCookie na určitý čas"  
      },
      {
         "question": "Jak se v php zapisuje cookie",
         "answer": "SetCookie('nazev_cookie', 'hodnota_cookie', 'unixový čas, kdy přestane být platná'); "  
      },
      {
         "question": "Co se stane, když nezadáme čas?",
         "answer": "Je to session cookie, takže jede do zavření prohlížeče"  
      },
      {
         "question": "Co znamená third party cookies?",
         "answer": "Cookies, které pochází ze serveru, který jen SPOLUPRACUJE s webem, na kterém jsme, ale je to jen reklamní web, který s ním spolupracuje. To nepotřebujeme a můžeme to zakázat"  
      },
      {
         "question": "Co jsou session proměnné?",
         "answer": "Server si udržuje databázi o uživatelech, kde jsou označeni jako Session Id (SID)\nPoužívá se hlavně cookies"
      },
      {
         "question": "Na co je session_start()",
         "answer": "musí se zavolat na začátku, zapíná to session"  
      },
      {
         "question": "Jak se zapisují v php session proměnné?",
         "answer": "$_SESSION['nazev'] = hodnota;"
      },
      {
         "question": "kde se ukládá session id",
         "answer": "Cookie, nebo url, oboje se dělá automaticky, pokud to nevypneme v htaccess\nDalší možnost je Web storage - úložiště dat na klientovi"
      },
      {
         "question": "Dělení web storage",
         "answer": "Local storage a session storage\ndělení podle času, jak dlouho vydrží"
      }
   ]
}
